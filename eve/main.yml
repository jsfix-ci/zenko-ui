---
version: 0.2

branches:
  feature/*, documentation/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*:
    stage: pre-merge
  development/*:
    stage: post-merge

models:
  - env: &deploy-env
      SCALITY_OCI_REPO: registry.scality.com/zenko-ui/zenko-ui
      SCALITY_OCI_REPO_DEV: registry.scality.com/zenko-ui-dev/zenko-ui
  - env: &keycloak-env
      KEYCLOAK_ROOT: "http://127.0.0.1:8080"
      KEYCLOAK_REALM: "myrealm"
      KEYCLOAK_CLIENT_ID: "myclient"
      KEYCLOAK_USERNAME: "bartsimpson"
      KEYCLOAK_PASSWORD: "123"
      KEYCLOAK_USER_FIRSTNAME: "Bart"
      KEYCLOAK_USER_LASTNAME: "Simpson"
  - env: &coverage
      CODECOV_TOKEN: '%(secret:codecov_token)s'
      VCS_COMMIT_ID: '%(prop:revision)s'
      VCS_BRANCH_NAME: '%(prop:branch)s'
      CI_BUILD_ID: '%(prop:bootstrap)s'
  - Git: &clone
      name: fetch source
      repourl: '%(prop:git_reference)s'
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &yarn-install
      name: install dependencies
      command: yarn install --frozen-lockfile
      haltOnFailure: true
  - ShellCommand: &yarn-build
      name: build assets
      command: yarn build
      haltOnFailure: true
  - ShellCommand: &docker-build
      name: build docker image
      command: >-
        set -exu;
        docker build --pull -t ${SCALITY_OCI_REPO_DEV}:%(prop:commit_short_revision)s .;
      haltOnFailure: True
      env: *deploy-env
  - ShellCommand: &docker-login
      name: login to docker registry
      command: >-
        docker login
        --username "%(secret:harbor_login)s"
        --password "%(secret:harbor_password)s"
        registry.scality.com

stages:
  pre-merge:
    worker: &worker
      type: kube_pod
      path: eve/workers/worker.yaml
      images:
        build: eve/workers/build
        keycloakconfig: eve/workers/keycloakconfig
      vars:
        keycloakconfig:
          env: *keycloak-env
    steps:
      - Git: *clone
      - ShellCommand: *yarn-install
      - ShellCommand:
          name: run eslint test
          command: yarn test:lint
          haltOnFailure: True
      - ShellCommand:
          name: run test suite
          command: yarn test:coverage
          haltOnFailure: True
      - ShellCommand: *yarn-build
      - ShellCommand: *docker-build
      - ShellCommand:
          name: run end-to-end tests
          command: >-
            docker run -d -p 8383:8383 ${SCALITY_OCI_REPO_DEV}:%(prop:commit_short_revision)s;
            set -exu;
            bash wait_for_local_port.bash 8080 40;
            bash wait_for_local_port.bash 8383 40;
            CYPRESS_KEYCLOAK_USER_FULLNAME="${KEYCLOAK_USER_FIRSTNAME} ${KEYCLOAK_USER_LASTNAME}"
            CYPRESS_KEYCLOAK_USERNAME=${KEYCLOAK_USERNAME}
            CYPRESS_KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
            CYPRESS_KEYCLOAK_ROOT=${KEYCLOAK_ROOT}
            CYPRESS_KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
            CYPRESS_KEYCLOAK_REALM=${KEYCLOAK_REALM} yarn run cypress:run;
          haltOnFailure: True
          env:
            <<: *deploy-env
            <<: *keycloak-env
      - ShellCommand:
          name: upload test coverage
          haltOnFailure: False
          command: "curl -s https://codecov.io/bash | bash"
          env:
            <<: *coverage
  post-merge:
    worker: *worker
    steps:
      - Git: *clone
      - ShellCommand: *yarn-install
      - ShellCommand: *yarn-build
      - ShellCommand: *docker-login
      - ShellCommand: *docker-build
      - ShellCommand:
          name: publish docker image to Scality OCI registry
          command: >-
            set -exu;
            docker push ${SCALITY_OCI_REPO_DEV}:%(prop:commit_short_revision)s;
          haltOnFailure: True
          env: *deploy-env

  tag:
  # Force this stage manually
  # Add the property tag with the tag name as value
    worker: *worker
    steps:
      - Git: *clone
      - ShellCommand: *docker-login
      - EvePropertyFromCommand:
          name: get tag short revision
          property: tag_revision
          command: git rev-parse --short %(prop:tag)s
      - ShellCommand:
          name: publish docker image to Scality Production OCI registry
          command: |
            docker pull ${SCALITY_OCI_REPO_DEV}:%(prop:tag_revision)s
            docker tag ${SCALITY_OCI_REPO_DEV}:%(prop:tag_revision)s ${SCALITY_OCI_REPO}:%(prop:tag)s
            docker push ${SCALITY_OCI_REPO}:%(prop:tag)s
          env: *deploy-env
